/* CSS RESET */
/* This effectively clears all pre-existing styles and gives you a clean slate browser. */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --main-background-color: #ababab;
  --header-background-color: #e7e8e9;
  --sidebar-background-color: #161717;
}

body {
  height: 100vh;
  display: grid;
  /* This creates two columns(vertical) - 1 thats 300px wide, the other column takes up the remaining space. */
  /* It is easier to use fraction than hard-coding a value because it is inaccurate. */
  grid-template-columns: 300px 1fr;
  /* Same with above but with rows(horizontal.) */
  grid-template-rows: 60px 1fr;

  /* Defines the grid layout area.*/
  grid-template-areas:
    "side header"
    "side main";
}

.main {
  background-color: var(--main-background-color);

  /* This lets you position the container on the grid layout. */
  /* This is one of the ways you can position the containers on a grid layout. */
  /* grid-row: 2 / 3;
  grid-column: 2 / 3; */

  /* Places the container to its appropriate grid-area. */
  grid-area: main;
}

.header {
  background-color: var(--header-background-color);

  /* This lets you position the container on the grid layout. */
  /* This is one of the ways you can position the containers on a grid layout. */
  /* grid-column: 2 / 3;
  grid-row: 1 / 2; */

  /* Places the container to its appropriate grid-area. */
  grid-area: header;
}

.sidebar {
  background-color: var(--sidebar-background-color);

  /* This lets you position the container on the grid layout. */
  /* This is one of the ways you can position the containers on a grid layout. */
  /* grid-column: 1 / 2;
  grid-row: 1 / 3; */

  /* Places the container to its appropriate grid-area. */
  grid-area: side;
}
